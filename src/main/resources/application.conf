akka.persistence.journal.plugin = "akka.persistence.journal.leveldb" # build.sbt local levelDB stores
akka.persistence.journal.leveldb.dir = "target/rtjvm/journal" # we create rtjvm & akka will create journal for us
# leveldb is a fileBased-keyValue store written by google and akka worte plugin to use it with persistentActors.

#config snapshot store
akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/rtjvm/snapshots"

#localStores
localStores {
  akka.persistence.journal.plugin = "akka.persistence.journal.leveldb" # build.sbt local levelDB stores
  akka.persistence.journal.leveldb.dir = "target/localStores/journal" # we create rtjvm & akka will create journal for us

  #journal can be configured with compaction-intervals
  akka.persistence.journal.leveldb.compaction-intervals {
    simple-persistence-actor = 1000 # our persistenceId => start compaction existing memory space at 10001th event
    "*" = 5000  # for "*" (for eveything else), start compaction existing memory space at 5001th event
    # can be configured per persistence id. This is hard to test as data of journal is store in multiple files.
  }

  #config snapshot store
  //  akka.persistence.snapshot-store{
  //    plugin =  ""
  //    local.dir = ""
  //  }
}


#postgres
postgresDemo {
  akka.persistence.journal.plugin = "jdbc-journal" # Name that allows akka-persistence to connect with java db. "akka-persistence-jdbc"
  akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store" # also exposed by lib "akka-persistence-jdbc"

  akka-persistence-jdbc { # Namespace that "jdbc-journel" plugin will use.
    shared-databases { # sharing db with jdbc-journal and jdbc-snapshot-store
      slick { # db, actual api akka will use to connect with postgres
        profile = "slick.jdbc.PostgresProfile$" # critical config
        db { # critical config, details of actual db that we are going to use
          numThreads = 10
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/rtjvm" # from sql/create-database.conf, docker-compose volumes...
          user = "docker" # docker-compose "POSTGRES_USER=docker"
          password = "docker" # docker-compose "POSTGRES_PASSWORD=docker"
        }
      }
    }
  }

  # use database that we configured above.
  jdbc-journal {
    use-shared-db = "slick"
  }
  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}

#cassandra
cassandraDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  //default values
  #https://github.com/akka/akka-persistence-cassandra
  # goto reference.conf
  # https://github.com/akka/akka-persistence-cassandra/blob/master/core/src/main/resources/reference.conf
}

#customSerializer
customSerializerDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store" # cassandra as backendStore

  akka.actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      rtjvm = "part3_stores_serialization.UserRegistrationSerializer"
    }

    serialization-bindings { # bound event to rtjvm serializer
      "part3_stores_serialization.UserRegistered" = rtjvm
      // java serializer is used by default.
    }
  }
}

#EventAdapters.scala
eventAdapters {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  #GuitarReadEventAdapter
  cassandra-journal {
    event-adapters {
      guitar-inventory-enhancer = "part4_practices.EventAdapters$GuitarReadEventAdapter"
    }
    event-adapter-bindings {
      "part4_practices.EventAdapters$GuitarAdded" = guitar-inventory-enhancer
    }
  }
}

#DetachingModels.scala
detachingModels {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      detach-adapter = "part4_practices.ModelAdapter"
    }
    event-adapter-bindings {
      "part4_practices.DomainModel$CouponApplied" = detach-adapter
      "part4_practices.DataModel$WrittenCouponApplied" = detach-adapter
      "part4_practices.DataModel$WrittenCouponAppliedV2" = detach-adapter
    }
  }
}

#PersistenceQueryDemo.scala
persistenceQuery {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  #MusicStoreCheckoutActor-MusicStoreEventAdapter
  cassandra-journal {
    event-adapters {
      tagging = "part4_practices.PersistenceQueryDemo$MusicStoreEventAdapter"
    }
    event-adapter-bindings {
      "part4_practices.PersistenceQueryDemo$PlaylistPurchased" = tagging
    }
  }
}


